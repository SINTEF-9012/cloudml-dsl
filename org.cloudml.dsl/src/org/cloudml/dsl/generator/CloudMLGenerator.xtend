/*
 * generated by Xtext
 */
package org.cloudml.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IGenerator
import org.eclipse.xtext.generator.IFileSystemAccess
import java.io.ByteArrayOutputStream
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl
import cloudml.core.Port
import cloudml.core.Component
import cloudml.core.CloudMLElement
import cloudml.core.CloudMLModel
import cloudml.core.VMInstance
import java.util.ArrayList
import org.eclipse.ocl.ecore.delegate.OCLDelegateDomain
import org.cloudml.core.Deployment
import org.cloudml.codecs.XmiCodec
import java.io.ByteArrayInputStream
import org.cloudml.codecs.JsonCodec
import org.eclipse.xtext.util.StringInputStream
import cloudml.core.Provider
import cloudml.core.PortInstance
import cloudml.core.ComponentInstance
import cloudml.core.ExecutionPlatformInstance

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class CloudMLGenerator implements IGenerator {
	
	
	override void doGenerate(Resource resource, IFileSystemAccess fsa) {
		
		
		
		val objit = resource.allContents
		while(objit.hasNext()){
			val elem = objit.next();
			switch elem{
				Port: {
					elem.component = elem.eContainer() as Component
				}
				Provider: {
					if(elem.name == "openstack_nova")
						elem.name = "openstack-nova"
				}
				PortInstance: {
					elem.name = '''«elem.name»_«(elem.eContainer as ComponentInstance).name»'''.toString
				}
				ExecutionPlatformInstance: {
					elem.name = '''«elem.name»_«(elem.eContainer as ComponentInstance).name»'''.toString
				}
			}
						
		}
		
		val fileName = (resource.contents.get(0) as CloudMLElement).getName();
		
		//OCLDelegateDomain.initialize(resource.resourceSet, "http://www.eclipse.org/emf/2002/Ecore/OCL/Pivot");
		
		val xmires = new XMIResourceImpl()
		xmires.contents.addAll(resource.contents)
		val baos = new ByteArrayOutputStream()
		xmires.save(baos, null)
		val result = baos.toString
		fsa.generateFile(fileName + '.xmi', result)
		
		try{
			
			
			val instream = new StringInputStream(result)
			
			val dm = new XmiCodec().load(instream)
			val baos2 = new ByteArrayOutputStream()
			new JsonCodec().save(dm, baos2)
			fsa.generateFile(fileName + '.json', baos2.toString)
			
		}
		catch(Exception e){
			e.printStackTrace();
		}
	}
	
	def cloudmlStringRecover(String string) {
		throw new UnsupportedOperationException("TODO: auto-generated method stub")
	}
	
}
