/**
 * generated by Xtext
 */
package org.cloudml.dsl.generator;

import cloudml.core.CloudMLElement;
import cloudml.core.Component;
import cloudml.core.Port;
import java.io.ByteArrayOutputStream;
import org.cloudml.codecs.JsonCodec;
import org.cloudml.codecs.XmiCodec;
import org.cloudml.core.NamedElement;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceImpl;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IGenerator;
import org.eclipse.xtext.util.StringInputStream;
import org.eclipse.xtext.xbase.lib.Exceptions;

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
@SuppressWarnings("all")
public class CloudMLGenerator implements IGenerator {
  public void doGenerate(final Resource resource, final IFileSystemAccess fsa) {
    try {
      final TreeIterator<EObject> objit = resource.getAllContents();
      boolean _hasNext = objit.hasNext();
      boolean _while = _hasNext;
      while (_while) {
        {
          final EObject elem = objit.next();
          if ((elem instanceof Port)) {
            EObject _eContainer = ((Port)elem).eContainer();
            ((Port)elem).setComponent(((Component) _eContainer));
          }
        }
        boolean _hasNext_1 = objit.hasNext();
        _while = _hasNext_1;
      }
      EList<EObject> _contents = resource.getContents();
      EObject _get = _contents.get(0);
      final String fileName = ((CloudMLElement) _get).getName();
      final XMIResourceImpl xmires = new XMIResourceImpl();
      EList<EObject> _contents_1 = xmires.getContents();
      EList<EObject> _contents_2 = resource.getContents();
      _contents_1.addAll(_contents_2);
      final ByteArrayOutputStream baos = new ByteArrayOutputStream();
      xmires.save(baos, null);
      final String result = baos.toString();
      fsa.generateFile((fileName + ".xmi"), result);
      final StringInputStream instream = new StringInputStream(result);
      XmiCodec _xmiCodec = new XmiCodec();
      final NamedElement dm = _xmiCodec.load(instream);
      final ByteArrayOutputStream baos2 = new ByteArrayOutputStream();
      JsonCodec _jsonCodec = new JsonCodec();
      _jsonCodec.save(dm, baos2);
      String _string = baos2.toString();
      fsa.generateFile((fileName + ".json"), _string);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
