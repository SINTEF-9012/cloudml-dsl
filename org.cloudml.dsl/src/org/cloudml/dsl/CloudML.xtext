grammar org.cloudml.dsl.CloudML with org.eclipse.xtext.common.Terminals

import "http://cloudml.net" as cloudml
import "http://cloudml.net/core"



CloudMLRoot returns CloudMLModel:
	'deployment' 'model' name = ValidID 
	providers += ProviderCS*
	'types' '{'
		(
			vms += VMCS | 
			internalComponents += InternalComponentCS |
			externalComponents += ExternalComponentCS 
		)*
		(relationships += RelationshipCS)*
		
	'}'
	
	'instances' '{'
		(
			internalComponentInstances += InternalComponentInstanceCS |
			externalComponentInstances += ExternalComponentInstanceCS |
			vmInstances += VMInstanceCS
		)*
		(relationshipInstances += RelationshipInstanceCS)*
		(executesInstances += ExecuteInstanceCS)*
	'}'

;



ProviderCS returns Provider:
	'provider' name = ValidID ':'
		credentials = STRING
		properties += PropertyCS*
;

VMCS returns VM:
	'vm' name = ValidID '{'
		( 
			(
			'provider' ':' provider = [Provider] |
			'group' ':' groupName=STRING |
			'imageID' ':' imageId=STRING |
			is64os?='os64' |
			'location' ':' location=STRING |
			'login' ':' login=STRING |
			'core' ':'  minCores=INT '..' (maxCores=INT)? |
			'ram' ':' minRam=INT '..' (maxRam=INT)? |
			'storage' ':' minStorage=INT '..' (maxStorage=INT)? |
			'os' ':' os=STRING |
			'passwd' ':' passwd=STRING |
			'privateKey' ':' privateKey=STRING |
			'region' ':' Region=STRING |
			'securityGroup' ':' securityGroup=STRING |
			'serviceType' ':' serviceType=STRING |
			'sshKey' ':' sshKey=STRING 
			) (',')?
				
		)*
		//'provided' 'vm' 'port' provided += VMPortCS*
		providedPorts += ProvidedPortCS*
		providedExecutionPlatforms += ProvidedExecutionPlatformCS*
		('properties' ':' properties += PropertyCS*)?
	'}'
;

VMPortCS returns VMPort: name = ValidID;


ExternalComponentCS returns ExternalComponent:
	'external' name = ValidID '{'
		(
			providedPorts += ProvidedPortCS |
			providedExecutionPlatforms += ProvidedExecutionPlatformCS
			
		)*
		('properties' ':' properties += PropertyCS*)?
		resources += ResourceCS*
	'}'
;

ProvidedPortCS returns ProvidedPort:
	'provided' 'port' name = ValidID 
	(':'
		((isLocal?='local' | 'port' ':' portNumber=INT) (',')?)*
		properties+=PropertyCS*
	)?
;

InternalComponentCS returns InternalComponent:
	'internal' name = ValidID '{'
		(
			providedPorts += ProvidedPortCS |
			requiredPorts += RequiredPortCS |
			requiredExecutionPlatform = RequiredExecutionPlatformCS |
			providedExecutionPlatforms += ProvidedExecutionPlatformCS
		)*
		('properties' ':' properties += PropertyCS*)?
		resources += ResourceCS*
	'}'
;

RequiredPortCS returns RequiredPort:
	'required' 'port' name = ValidID 
	(':'
		((isLocal?='local' | 'port' ':' portNumber=INT | isMandatory?='mandatory') (',')?)*
		properties+=PropertyCS*
	)?
;

RequiredExecutionPlatformCS returns RequiredExecutionPlatform:
	'required' 'execution' name = ValidID 
	(':'
		('demands' ':' demands+=PropertyCS* )?
		'properties' ':' properties+=PropertyCS*
	)?
;

ProvidedExecutionPlatformCS returns ProvidedExecutionPlatform:
	'provided' 'execution' name = ValidID 
	(':'
		('offers' ':' offers+=PropertyCS*)?
		'properties' ':' properties+=PropertyCS*
	)?
;

RelationshipCSOld returns Relationship:
	'relationship' name = ValidID 
		(
			(':' requiredPort = [RequiredPort|Fqn] '=>' providedPort = [ProvidedPort|Fqn]) |
			('{' 
				requiredPort = [RequiredPort|Fqn] '=>' providedPort = [ProvidedPort|Fqn]
				('properties' ':' properties += PropertyCS*)?
				resources += ResourceCS*
			 '}'	
			)
		)
;

RelationshipCS returns Relationship:
	'connect' requiredPort = [RequiredPort|Fqn] 'to' providedPort = [ProvidedPort|Fqn] 'named' name=ValidID 
		(   
			(':' properties += PropertyCS*) |
			('{' 
				('properties' ':' properties += PropertyCS*)?
				resources += ResourceCS*
			 '}'	
			)
		)?
;

ExternalComponentInstanceCS returns ExternalComponentInstance:
	'external' name = ValidID 'typed' type = [ExternalComponent]
;

InternalComponentInstanceCS returns InternalComponentInstance:
	'internal'  name = ValidID 'typed' type = [InternalComponent]
;

VMInstanceCS returns VMInstance:
	'vm'  name = ValidID 'typed' type = [VM]
;

RelationshipInstanceCS returns RelationshipInstance:
	'connect' requiredPortInstance = [RequiredPortInstance|Fqn] 'to' providedPortInstance = [ProvidedPortInstance|Fqn]
	'typed' type = [Relationship]  ('named' name = ValidID)?
;

ExecuteInstanceCS returns ExecuteInstance:
	'host' 
		requiredExecutionPlatformInstance = [RequiredExecutionPlatformInstance|Fqn] 
		'on'
		providedExecutionPlatformInstance = [ProvidedExecutionPlatformInstance|Fqn]	
	('named' name = ValidID)?
;

PropertyCS returns Property:
	'(' name = STRING ':' value = STRING ')'
;

ResourceCS returns Resource:
	'resource' (name = ValidID)? '{'
		((
			'download' ':' downloadCommand = STRING |
			'upload' ':' uploadCommand = STRING |
			'install' ':' installCommand = STRING |
			'configure' ':' configureCommand = STRING |
			'start' ':' startCommand = STRING |
			'stop' ':' stopCommand = STRING |
			requireCredentials ?= 'requireCredentials' |
			executeLocally ?= 'executeLocally'
		) (',')?
		)*
	'}'
;

ValidID : ID;


Fqn : ValidID ('.' ValidID)*;