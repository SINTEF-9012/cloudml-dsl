/*
* generated by Xtext
*/
package org.cloudml.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class CloudMLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class CloudMLRootElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CloudMLRoot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cModelKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cProvidersAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cProvidersProviderCSParserRuleCall_2_0 = (RuleCall)cProvidersAssignment_2.eContents().get(0);
		private final Keyword cComponentsKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cVmsAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cVmsVMCSParserRuleCall_5_0_0 = (RuleCall)cVmsAssignment_5_0.eContents().get(0);
		private final Assignment cInternalComponentsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cInternalComponentsInternalComponentCSParserRuleCall_5_1_0 = (RuleCall)cInternalComponentsAssignment_5_1.eContents().get(0);
		private final Assignment cExternalComponentsAssignment_5_2 = (Assignment)cAlternatives_5.eContents().get(2);
		private final RuleCall cExternalComponentsExternalComponentCSParserRuleCall_5_2_0 = (RuleCall)cExternalComponentsAssignment_5_2.eContents().get(0);
		private final Assignment cRelationshipsAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cRelationshipsRelationshipCSParserRuleCall_6_0 = (RuleCall)cRelationshipsAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cInstancesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Alternatives cAlternatives_10 = (Alternatives)cGroup.eContents().get(10);
		private final Assignment cComponentInstancesAssignment_10_0 = (Assignment)cAlternatives_10.eContents().get(0);
		private final RuleCall cComponentInstancesInternalComponentInstanceCSParserRuleCall_10_0_0 = (RuleCall)cComponentInstancesAssignment_10_0.eContents().get(0);
		private final Assignment cComponentInstancesAssignment_10_1 = (Assignment)cAlternatives_10.eContents().get(1);
		private final RuleCall cComponentInstancesExternalComponentInstanceCSParserRuleCall_10_1_0 = (RuleCall)cComponentInstancesAssignment_10_1.eContents().get(0);
		private final Assignment cRelationshipInstancesAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cRelationshipInstancesRelationshipInstanceCSParserRuleCall_11_0 = (RuleCall)cRelationshipInstancesAssignment_11.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//CloudMLRoot returns CloudMLModel:
		//	"model" name=ID providers+=ProviderCS* "components" "{" (vms+=VMCS | internalComponents+=InternalComponentCS |
		//	externalComponents+=ExternalComponentCS)* relationships+=RelationshipCS* "}" "instances" "{"
		//	(componentInstances+=InternalComponentInstanceCS | componentInstances+=ExternalComponentInstanceCS)*
		//	relationshipInstances+=RelationshipInstanceCS* "}";
		public ParserRule getRule() { return rule; }

		//"model" name=ID providers+=ProviderCS* "components" "{" (vms+=VMCS | internalComponents+=InternalComponentCS |
		//externalComponents+=ExternalComponentCS)* relationships+=RelationshipCS* "}" "instances" "{"
		//(componentInstances+=InternalComponentInstanceCS | componentInstances+=ExternalComponentInstanceCS)*
		//relationshipInstances+=RelationshipInstanceCS* "}"
		public Group getGroup() { return cGroup; }

		//"model"
		public Keyword getModelKeyword_0() { return cModelKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//providers+=ProviderCS*
		public Assignment getProvidersAssignment_2() { return cProvidersAssignment_2; }

		//ProviderCS
		public RuleCall getProvidersProviderCSParserRuleCall_2_0() { return cProvidersProviderCSParserRuleCall_2_0; }

		//"components"
		public Keyword getComponentsKeyword_3() { return cComponentsKeyword_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//(vms+=VMCS | internalComponents+=InternalComponentCS | externalComponents+=ExternalComponentCS)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//vms+=VMCS
		public Assignment getVmsAssignment_5_0() { return cVmsAssignment_5_0; }

		//VMCS
		public RuleCall getVmsVMCSParserRuleCall_5_0_0() { return cVmsVMCSParserRuleCall_5_0_0; }

		//internalComponents+=InternalComponentCS
		public Assignment getInternalComponentsAssignment_5_1() { return cInternalComponentsAssignment_5_1; }

		//InternalComponentCS
		public RuleCall getInternalComponentsInternalComponentCSParserRuleCall_5_1_0() { return cInternalComponentsInternalComponentCSParserRuleCall_5_1_0; }

		//externalComponents+=ExternalComponentCS
		public Assignment getExternalComponentsAssignment_5_2() { return cExternalComponentsAssignment_5_2; }

		//ExternalComponentCS
		public RuleCall getExternalComponentsExternalComponentCSParserRuleCall_5_2_0() { return cExternalComponentsExternalComponentCSParserRuleCall_5_2_0; }

		//relationships+=RelationshipCS*
		public Assignment getRelationshipsAssignment_6() { return cRelationshipsAssignment_6; }

		//RelationshipCS
		public RuleCall getRelationshipsRelationshipCSParserRuleCall_6_0() { return cRelationshipsRelationshipCSParserRuleCall_6_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }

		//"instances"
		public Keyword getInstancesKeyword_8() { return cInstancesKeyword_8; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_9() { return cLeftCurlyBracketKeyword_9; }

		//(componentInstances+=InternalComponentInstanceCS | componentInstances+=ExternalComponentInstanceCS)*
		public Alternatives getAlternatives_10() { return cAlternatives_10; }

		//componentInstances+=InternalComponentInstanceCS
		public Assignment getComponentInstancesAssignment_10_0() { return cComponentInstancesAssignment_10_0; }

		//InternalComponentInstanceCS
		public RuleCall getComponentInstancesInternalComponentInstanceCSParserRuleCall_10_0_0() { return cComponentInstancesInternalComponentInstanceCSParserRuleCall_10_0_0; }

		//componentInstances+=ExternalComponentInstanceCS
		public Assignment getComponentInstancesAssignment_10_1() { return cComponentInstancesAssignment_10_1; }

		//ExternalComponentInstanceCS
		public RuleCall getComponentInstancesExternalComponentInstanceCSParserRuleCall_10_1_0() { return cComponentInstancesExternalComponentInstanceCSParserRuleCall_10_1_0; }

		//relationshipInstances+=RelationshipInstanceCS*
		public Assignment getRelationshipInstancesAssignment_11() { return cRelationshipInstancesAssignment_11; }

		//RelationshipInstanceCS
		public RuleCall getRelationshipInstancesRelationshipInstanceCSParserRuleCall_11_0() { return cRelationshipInstancesRelationshipInstanceCSParserRuleCall_11_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}

	public class ProviderCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProviderCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProviderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cCredentialsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cCredentialsSTRINGTerminalRuleCall_3_0 = (RuleCall)cCredentialsAssignment_3.eContents().get(0);
		
		//ProviderCS returns Provider:
		//	"provider" name=ID ":" credentials=STRING;
		public ParserRule getRule() { return rule; }

		//"provider" name=ID ":" credentials=STRING
		public Group getGroup() { return cGroup; }

		//"provider"
		public Keyword getProviderKeyword_0() { return cProviderKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//credentials=STRING
		public Assignment getCredentialsAssignment_3() { return cCredentialsAssignment_3; }

		//STRING
		public RuleCall getCredentialsSTRINGTerminalRuleCall_3_0() { return cCredentialsSTRINGTerminalRuleCall_3_0; }
	}

	public class VMCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VMCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVmKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProvidedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvidedVMPortCSParserRuleCall_3_0 = (RuleCall)cProvidedAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//VMCS returns VM:
		//	"vm" name=ID "{" provided+=VMPortCS* "}";
		public ParserRule getRule() { return rule; }

		//"vm" name=ID "{" provided+=VMPortCS* "}"
		public Group getGroup() { return cGroup; }

		//"vm"
		public Keyword getVmKeyword_0() { return cVmKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//provided+=VMPortCS*
		public Assignment getProvidedAssignment_3() { return cProvidedAssignment_3; }

		//VMPortCS
		public RuleCall getProvidedVMPortCSParserRuleCall_3_0() { return cProvidedVMPortCSParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class VMPortCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VMPortCS");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//VMPortCS returns VMPort:
		//	name=ID;
		public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class ExternalComponentCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalComponentCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProvidedPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvidedPortsProvidedPortCSParserRuleCall_3_0 = (RuleCall)cProvidedPortsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ExternalComponentCS returns ExternalComponent:
		//	"external" name=ID "{" providedPorts+=ProvidedPortCS* "}";
		public ParserRule getRule() { return rule; }

		//"external" name=ID "{" providedPorts+=ProvidedPortCS* "}"
		public Group getGroup() { return cGroup; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//providedPorts+=ProvidedPortCS*
		public Assignment getProvidedPortsAssignment_3() { return cProvidedPortsAssignment_3; }

		//ProvidedPortCS
		public RuleCall getProvidedPortsProvidedPortCSParserRuleCall_3_0() { return cProvidedPortsProvidedPortCSParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ProvidedPortCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ProvidedPortCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProvidedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsLocalAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsLocalLocalKeyword_1_0 = (Keyword)cIsLocalAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cComponentComponentCrossReference_3_0 = (CrossReference)cComponentAssignment_3.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cComponentComponentCrossReference_3_0.eContents().get(1);
		
		//ProvidedPortCS returns ProvidedPort:
		//	"provided" isLocal?="local"? name=ID component=[Component]?;
		public ParserRule getRule() { return rule; }

		//"provided" isLocal?="local"? name=ID component=[Component]?
		public Group getGroup() { return cGroup; }

		//"provided"
		public Keyword getProvidedKeyword_0() { return cProvidedKeyword_0; }

		//isLocal?="local"?
		public Assignment getIsLocalAssignment_1() { return cIsLocalAssignment_1; }

		//"local"
		public Keyword getIsLocalLocalKeyword_1_0() { return cIsLocalLocalKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//component=[Component]?
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }

		//[Component]
		public CrossReference getComponentComponentCrossReference_3_0() { return cComponentComponentCrossReference_3_0; }

		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_3_0_1() { return cComponentComponentIDTerminalRuleCall_3_0_1; }
	}

	public class InternalComponentCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalComponentCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProvidedPortsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cProvidedPortsProvidedPortCSParserRuleCall_3_0 = (RuleCall)cProvidedPortsAssignment_3.eContents().get(0);
		private final Assignment cRequiredPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRequiredPortsRequiredPortCSParserRuleCall_4_0 = (RuleCall)cRequiredPortsAssignment_4.eContents().get(0);
		private final Assignment cRequiredExecutionPlatformAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRequiredExecutionPlatformRequiredExecutionPlatformCSParserRuleCall_5_0 = (RuleCall)cRequiredExecutionPlatformAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//InternalComponentCS returns InternalComponent:
		//	"internal" name=ID "{" providedPorts+=ProvidedPortCS* requiredPorts+=RequiredPortCS*
		//	requiredExecutionPlatform=RequiredExecutionPlatformCS "}";
		public ParserRule getRule() { return rule; }

		//"internal" name=ID "{" providedPorts+=ProvidedPortCS* requiredPorts+=RequiredPortCS*
		//requiredExecutionPlatform=RequiredExecutionPlatformCS "}"
		public Group getGroup() { return cGroup; }

		//"internal"
		public Keyword getInternalKeyword_0() { return cInternalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//providedPorts+=ProvidedPortCS*
		public Assignment getProvidedPortsAssignment_3() { return cProvidedPortsAssignment_3; }

		//ProvidedPortCS
		public RuleCall getProvidedPortsProvidedPortCSParserRuleCall_3_0() { return cProvidedPortsProvidedPortCSParserRuleCall_3_0; }

		//requiredPorts+=RequiredPortCS*
		public Assignment getRequiredPortsAssignment_4() { return cRequiredPortsAssignment_4; }

		//RequiredPortCS
		public RuleCall getRequiredPortsRequiredPortCSParserRuleCall_4_0() { return cRequiredPortsRequiredPortCSParserRuleCall_4_0; }

		//requiredExecutionPlatform=RequiredExecutionPlatformCS
		public Assignment getRequiredExecutionPlatformAssignment_5() { return cRequiredExecutionPlatformAssignment_5; }

		//RequiredExecutionPlatformCS
		public RuleCall getRequiredExecutionPlatformRequiredExecutionPlatformCSParserRuleCall_5_0() { return cRequiredExecutionPlatformRequiredExecutionPlatformCSParserRuleCall_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}

	public class RequiredPortCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredPortCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRequiredKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIsMandatoryAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Keyword cIsMandatoryMandatoryKeyword_1_0 = (Keyword)cIsMandatoryAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Assignment cComponentAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cComponentComponentCrossReference_3_0 = (CrossReference)cComponentAssignment_3.eContents().get(0);
		private final RuleCall cComponentComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cComponentComponentCrossReference_3_0.eContents().get(1);
		
		//RequiredPortCS returns RequiredPort:
		//	"required" isMandatory?="mandatory"? name=ID component=[Component]?;
		public ParserRule getRule() { return rule; }

		//"required" isMandatory?="mandatory"? name=ID component=[Component]?
		public Group getGroup() { return cGroup; }

		//"required"
		public Keyword getRequiredKeyword_0() { return cRequiredKeyword_0; }

		//isMandatory?="mandatory"?
		public Assignment getIsMandatoryAssignment_1() { return cIsMandatoryAssignment_1; }

		//"mandatory"
		public Keyword getIsMandatoryMandatoryKeyword_1_0() { return cIsMandatoryMandatoryKeyword_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }

		//component=[Component]?
		public Assignment getComponentAssignment_3() { return cComponentAssignment_3; }

		//[Component]
		public CrossReference getComponentComponentCrossReference_3_0() { return cComponentComponentCrossReference_3_0; }

		//ID
		public RuleCall getComponentComponentIDTerminalRuleCall_3_0_1() { return cComponentComponentIDTerminalRuleCall_3_0_1; }
	}

	public class RequiredExecutionPlatformCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RequiredExecutionPlatformCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExecutionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Assignment cOwnerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cOwnerComponentCrossReference_2_0 = (CrossReference)cOwnerAssignment_2.eContents().get(0);
		private final RuleCall cOwnerComponentIDTerminalRuleCall_2_0_1 = (RuleCall)cOwnerComponentCrossReference_2_0.eContents().get(1);
		
		//RequiredExecutionPlatformCS returns RequiredExecutionPlatform:
		//	"execution" name=ID owner=[Component]?;
		public ParserRule getRule() { return rule; }

		//"execution" name=ID owner=[Component]?
		public Group getGroup() { return cGroup; }

		//"execution"
		public Keyword getExecutionKeyword_0() { return cExecutionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//owner=[Component]?
		public Assignment getOwnerAssignment_2() { return cOwnerAssignment_2; }

		//[Component]
		public CrossReference getOwnerComponentCrossReference_2_0() { return cOwnerComponentCrossReference_2_0; }

		//ID
		public RuleCall getOwnerComponentIDTerminalRuleCall_2_0_1() { return cOwnerComponentIDTerminalRuleCall_2_0_1; }
	}

	public class RelationshipCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRequiredPortAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cRequiredPortRequiredPortCrossReference_2_0 = (CrossReference)cRequiredPortAssignment_2.eContents().get(0);
		private final RuleCall cRequiredPortRequiredPortFqnParserRuleCall_2_0_1 = (RuleCall)cRequiredPortRequiredPortCrossReference_2_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cProvidedPortAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cProvidedPortProvidedPortCrossReference_4_0 = (CrossReference)cProvidedPortAssignment_4.eContents().get(0);
		private final RuleCall cProvidedPortProvidedPortFqnParserRuleCall_4_0_1 = (RuleCall)cProvidedPortProvidedPortCrossReference_4_0.eContents().get(1);
		
		//RelationshipCS returns Relationship:
		//	name=ID ":" requiredPort=[RequiredPort|Fqn] "=>" providedPort=[ProvidedPort|Fqn];
		public ParserRule getRule() { return rule; }

		//name=ID ":" requiredPort=[RequiredPort|Fqn] "=>" providedPort=[ProvidedPort|Fqn]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//requiredPort=[RequiredPort|Fqn]
		public Assignment getRequiredPortAssignment_2() { return cRequiredPortAssignment_2; }

		//[RequiredPort|Fqn]
		public CrossReference getRequiredPortRequiredPortCrossReference_2_0() { return cRequiredPortRequiredPortCrossReference_2_0; }

		//Fqn
		public RuleCall getRequiredPortRequiredPortFqnParserRuleCall_2_0_1() { return cRequiredPortRequiredPortFqnParserRuleCall_2_0_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_3() { return cEqualsSignGreaterThanSignKeyword_3; }

		//providedPort=[ProvidedPort|Fqn]
		public Assignment getProvidedPortAssignment_4() { return cProvidedPortAssignment_4; }

		//[ProvidedPort|Fqn]
		public CrossReference getProvidedPortProvidedPortCrossReference_4_0() { return cProvidedPortProvidedPortCrossReference_4_0; }

		//Fqn
		public RuleCall getProvidedPortProvidedPortFqnParserRuleCall_4_0_1() { return cProvidedPortProvidedPortFqnParserRuleCall_4_0_1; }
	}

	public class ExternalComponentInstanceCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalComponentInstanceCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeExternalComponentCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeExternalComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeExternalComponentCrossReference_3_0.eContents().get(1);
		
		//ExternalComponentInstanceCS returns ExternalComponentInstance:
		//	"external" name=ID ":" type=[ExternalComponent];
		public ParserRule getRule() { return rule; }

		//"external" name=ID ":" type=[ExternalComponent]
		public Group getGroup() { return cGroup; }

		//"external"
		public Keyword getExternalKeyword_0() { return cExternalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[ExternalComponent]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[ExternalComponent]
		public CrossReference getTypeExternalComponentCrossReference_3_0() { return cTypeExternalComponentCrossReference_3_0; }

		//ID
		public RuleCall getTypeExternalComponentIDTerminalRuleCall_3_0_1() { return cTypeExternalComponentIDTerminalRuleCall_3_0_1; }
	}

	public class InternalComponentInstanceCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalComponentInstanceCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cInternalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cTypeInternalComponentCrossReference_3_0 = (CrossReference)cTypeAssignment_3.eContents().get(0);
		private final RuleCall cTypeInternalComponentIDTerminalRuleCall_3_0_1 = (RuleCall)cTypeInternalComponentCrossReference_3_0.eContents().get(1);
		
		//InternalComponentInstanceCS returns InternalComponentInstance:
		//	"internal" name=ID ":" type=[InternalComponent];
		public ParserRule getRule() { return rule; }

		//"internal" name=ID ":" type=[InternalComponent]
		public Group getGroup() { return cGroup; }

		//"internal"
		public Keyword getInternalKeyword_0() { return cInternalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//type=[InternalComponent]
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }

		//[InternalComponent]
		public CrossReference getTypeInternalComponentCrossReference_3_0() { return cTypeInternalComponentCrossReference_3_0; }

		//ID
		public RuleCall getTypeInternalComponentIDTerminalRuleCall_3_0_1() { return cTypeInternalComponentIDTerminalRuleCall_3_0_1; }
	}

	public class RelationshipInstanceCSElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RelationshipInstanceCS");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cTypeRelationshipCrossReference_2_0 = (CrossReference)cTypeAssignment_2.eContents().get(0);
		private final RuleCall cTypeRelationshipIDTerminalRuleCall_2_0_1 = (RuleCall)cTypeRelationshipCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRequiredPortInstanceAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cRequiredPortInstanceRequiredPortInstanceCrossReference_4_0 = (CrossReference)cRequiredPortInstanceAssignment_4.eContents().get(0);
		private final RuleCall cRequiredPortInstanceRequiredPortInstanceFqnParserRuleCall_4_0_1 = (RuleCall)cRequiredPortInstanceRequiredPortInstanceCrossReference_4_0.eContents().get(1);
		private final Keyword cEqualsSignGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cProvidedPortInstanceAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cProvidedPortInstanceProvidedPortInstanceCrossReference_6_0 = (CrossReference)cProvidedPortInstanceAssignment_6.eContents().get(0);
		private final RuleCall cProvidedPortInstanceProvidedPortInstanceFqnParserRuleCall_6_0_1 = (RuleCall)cProvidedPortInstanceProvidedPortInstanceCrossReference_6_0.eContents().get(1);
		
		//RelationshipInstanceCS returns RelationshipInstance:
		//	name=ID ":" type=[Relationship] ":" requiredPortInstance=[RequiredPortInstance|Fqn] "=>"
		//	providedPortInstance=[ProvidedPortInstance|Fqn];
		public ParserRule getRule() { return rule; }

		//name=ID ":" type=[Relationship] ":" requiredPortInstance=[RequiredPortInstance|Fqn] "=>"
		//providedPortInstance=[ProvidedPortInstance|Fqn]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//type=[Relationship]
		public Assignment getTypeAssignment_2() { return cTypeAssignment_2; }

		//[Relationship]
		public CrossReference getTypeRelationshipCrossReference_2_0() { return cTypeRelationshipCrossReference_2_0; }

		//ID
		public RuleCall getTypeRelationshipIDTerminalRuleCall_2_0_1() { return cTypeRelationshipIDTerminalRuleCall_2_0_1; }

		//":"
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }

		//requiredPortInstance=[RequiredPortInstance|Fqn]
		public Assignment getRequiredPortInstanceAssignment_4() { return cRequiredPortInstanceAssignment_4; }

		//[RequiredPortInstance|Fqn]
		public CrossReference getRequiredPortInstanceRequiredPortInstanceCrossReference_4_0() { return cRequiredPortInstanceRequiredPortInstanceCrossReference_4_0; }

		//Fqn
		public RuleCall getRequiredPortInstanceRequiredPortInstanceFqnParserRuleCall_4_0_1() { return cRequiredPortInstanceRequiredPortInstanceFqnParserRuleCall_4_0_1; }

		//"=>"
		public Keyword getEqualsSignGreaterThanSignKeyword_5() { return cEqualsSignGreaterThanSignKeyword_5; }

		//providedPortInstance=[ProvidedPortInstance|Fqn]
		public Assignment getProvidedPortInstanceAssignment_6() { return cProvidedPortInstanceAssignment_6; }

		//[ProvidedPortInstance|Fqn]
		public CrossReference getProvidedPortInstanceProvidedPortInstanceCrossReference_6_0() { return cProvidedPortInstanceProvidedPortInstanceCrossReference_6_0; }

		//Fqn
		public RuleCall getProvidedPortInstanceProvidedPortInstanceFqnParserRuleCall_6_0_1() { return cProvidedPortInstanceProvidedPortInstanceFqnParserRuleCall_6_0_1; }
	}

	public class FqnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Fqn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Fqn:
		//	ID ("." ID)*;
		public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private CloudMLRootElements pCloudMLRoot;
	private ProviderCSElements pProviderCS;
	private VMCSElements pVMCS;
	private VMPortCSElements pVMPortCS;
	private ExternalComponentCSElements pExternalComponentCS;
	private ProvidedPortCSElements pProvidedPortCS;
	private InternalComponentCSElements pInternalComponentCS;
	private RequiredPortCSElements pRequiredPortCS;
	private RequiredExecutionPlatformCSElements pRequiredExecutionPlatformCS;
	private RelationshipCSElements pRelationshipCS;
	private ExternalComponentInstanceCSElements pExternalComponentInstanceCS;
	private InternalComponentInstanceCSElements pInternalComponentInstanceCS;
	private RelationshipInstanceCSElements pRelationshipInstanceCS;
	private FqnElements pFqn;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public CloudMLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.cloudml.dsl.CloudML".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//CloudMLRoot returns CloudMLModel:
	//	"model" name=ID providers+=ProviderCS* "components" "{" (vms+=VMCS | internalComponents+=InternalComponentCS |
	//	externalComponents+=ExternalComponentCS)* relationships+=RelationshipCS* "}" "instances" "{"
	//	(componentInstances+=InternalComponentInstanceCS | componentInstances+=ExternalComponentInstanceCS)*
	//	relationshipInstances+=RelationshipInstanceCS* "}";
	public CloudMLRootElements getCloudMLRootAccess() {
		return (pCloudMLRoot != null) ? pCloudMLRoot : (pCloudMLRoot = new CloudMLRootElements());
	}
	
	public ParserRule getCloudMLRootRule() {
		return getCloudMLRootAccess().getRule();
	}

	//ProviderCS returns Provider:
	//	"provider" name=ID ":" credentials=STRING;
	public ProviderCSElements getProviderCSAccess() {
		return (pProviderCS != null) ? pProviderCS : (pProviderCS = new ProviderCSElements());
	}
	
	public ParserRule getProviderCSRule() {
		return getProviderCSAccess().getRule();
	}

	//VMCS returns VM:
	//	"vm" name=ID "{" provided+=VMPortCS* "}";
	public VMCSElements getVMCSAccess() {
		return (pVMCS != null) ? pVMCS : (pVMCS = new VMCSElements());
	}
	
	public ParserRule getVMCSRule() {
		return getVMCSAccess().getRule();
	}

	//VMPortCS returns VMPort:
	//	name=ID;
	public VMPortCSElements getVMPortCSAccess() {
		return (pVMPortCS != null) ? pVMPortCS : (pVMPortCS = new VMPortCSElements());
	}
	
	public ParserRule getVMPortCSRule() {
		return getVMPortCSAccess().getRule();
	}

	//ExternalComponentCS returns ExternalComponent:
	//	"external" name=ID "{" providedPorts+=ProvidedPortCS* "}";
	public ExternalComponentCSElements getExternalComponentCSAccess() {
		return (pExternalComponentCS != null) ? pExternalComponentCS : (pExternalComponentCS = new ExternalComponentCSElements());
	}
	
	public ParserRule getExternalComponentCSRule() {
		return getExternalComponentCSAccess().getRule();
	}

	//ProvidedPortCS returns ProvidedPort:
	//	"provided" isLocal?="local"? name=ID component=[Component]?;
	public ProvidedPortCSElements getProvidedPortCSAccess() {
		return (pProvidedPortCS != null) ? pProvidedPortCS : (pProvidedPortCS = new ProvidedPortCSElements());
	}
	
	public ParserRule getProvidedPortCSRule() {
		return getProvidedPortCSAccess().getRule();
	}

	//InternalComponentCS returns InternalComponent:
	//	"internal" name=ID "{" providedPorts+=ProvidedPortCS* requiredPorts+=RequiredPortCS*
	//	requiredExecutionPlatform=RequiredExecutionPlatformCS "}";
	public InternalComponentCSElements getInternalComponentCSAccess() {
		return (pInternalComponentCS != null) ? pInternalComponentCS : (pInternalComponentCS = new InternalComponentCSElements());
	}
	
	public ParserRule getInternalComponentCSRule() {
		return getInternalComponentCSAccess().getRule();
	}

	//RequiredPortCS returns RequiredPort:
	//	"required" isMandatory?="mandatory"? name=ID component=[Component]?;
	public RequiredPortCSElements getRequiredPortCSAccess() {
		return (pRequiredPortCS != null) ? pRequiredPortCS : (pRequiredPortCS = new RequiredPortCSElements());
	}
	
	public ParserRule getRequiredPortCSRule() {
		return getRequiredPortCSAccess().getRule();
	}

	//RequiredExecutionPlatformCS returns RequiredExecutionPlatform:
	//	"execution" name=ID owner=[Component]?;
	public RequiredExecutionPlatformCSElements getRequiredExecutionPlatformCSAccess() {
		return (pRequiredExecutionPlatformCS != null) ? pRequiredExecutionPlatformCS : (pRequiredExecutionPlatformCS = new RequiredExecutionPlatformCSElements());
	}
	
	public ParserRule getRequiredExecutionPlatformCSRule() {
		return getRequiredExecutionPlatformCSAccess().getRule();
	}

	//RelationshipCS returns Relationship:
	//	name=ID ":" requiredPort=[RequiredPort|Fqn] "=>" providedPort=[ProvidedPort|Fqn];
	public RelationshipCSElements getRelationshipCSAccess() {
		return (pRelationshipCS != null) ? pRelationshipCS : (pRelationshipCS = new RelationshipCSElements());
	}
	
	public ParserRule getRelationshipCSRule() {
		return getRelationshipCSAccess().getRule();
	}

	//ExternalComponentInstanceCS returns ExternalComponentInstance:
	//	"external" name=ID ":" type=[ExternalComponent];
	public ExternalComponentInstanceCSElements getExternalComponentInstanceCSAccess() {
		return (pExternalComponentInstanceCS != null) ? pExternalComponentInstanceCS : (pExternalComponentInstanceCS = new ExternalComponentInstanceCSElements());
	}
	
	public ParserRule getExternalComponentInstanceCSRule() {
		return getExternalComponentInstanceCSAccess().getRule();
	}

	//InternalComponentInstanceCS returns InternalComponentInstance:
	//	"internal" name=ID ":" type=[InternalComponent];
	public InternalComponentInstanceCSElements getInternalComponentInstanceCSAccess() {
		return (pInternalComponentInstanceCS != null) ? pInternalComponentInstanceCS : (pInternalComponentInstanceCS = new InternalComponentInstanceCSElements());
	}
	
	public ParserRule getInternalComponentInstanceCSRule() {
		return getInternalComponentInstanceCSAccess().getRule();
	}

	//RelationshipInstanceCS returns RelationshipInstance:
	//	name=ID ":" type=[Relationship] ":" requiredPortInstance=[RequiredPortInstance|Fqn] "=>"
	//	providedPortInstance=[ProvidedPortInstance|Fqn];
	public RelationshipInstanceCSElements getRelationshipInstanceCSAccess() {
		return (pRelationshipInstanceCS != null) ? pRelationshipInstanceCS : (pRelationshipInstanceCS = new RelationshipInstanceCSElements());
	}
	
	public ParserRule getRelationshipInstanceCSRule() {
		return getRelationshipInstanceCSAccess().getRule();
	}

	//Fqn:
	//	ID ("." ID)*;
	public FqnElements getFqnAccess() {
		return (pFqn != null) ? pFqn : (pFqn = new FqnElements());
	}
	
	public ParserRule getFqnRule() {
		return getFqnAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
